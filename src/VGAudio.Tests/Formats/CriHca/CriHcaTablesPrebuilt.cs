namespace VGAudio.Tests.Formats.CriHca
{
    public static class CriHcaTablesPrebuilt
    {
        public static float[] DequantizerScalingTable { get; } =
        {
            1.58838333e-7f, 2.11641364e-7f, 2.81997842e-7f, 3.75743127e-7f, 5.00652334e-7f, 6.67085487e-7f, 8.88846444e-7f, 1.18432786e-6f,
            1.57803709e-6f, 2.10262783e-6f, 2.80160975e-6f, 3.73295620e-6f, 4.97391238e-6f, 6.62740285e-6f, 8.83056691e-6f, 1.17661348e-5f,
            1.56775804e-5f, 2.08893198e-5f, 2.78336083e-5f, 3.70864072e-5f, 4.94151354e-5f, 6.58423305e-5f, 8.77304701e-5f, 1.16894931e-4f,
            1.55754606e-4f, 2.07532517e-4f, 2.76523089e-4f, 3.68448353e-4f, 4.90932551e-4f, 6.54134550e-4f, 8.71590164e-4f, 1.16133504e-3f,
            1.54740061e-3f, 2.06180708e-3f, 2.74721882e-3f, 3.66048375e-3f, 4.87734750e-3f, 6.49873680e-3f, 8.65912810e-3f, 1.15377046e-2f,
            1.53732123e-2f, 2.04837695e-2f, 2.72932407e-2f, 3.63664031e-2f, 4.84557785e-2f, 6.45640567e-2f, 8.60272497e-2f, 1.14625506e-1f,
            1.52730748e-1f, 2.03503430e-1f, 2.71154583e-1f, 3.61295193e-1f, 4.81401473e-1f, 6.41435027e-1f, 8.54668856e-1f, 1.13878858e+0f,
            1.51735902e+0f, 2.02177858e+0f, 2.69388366e+0f, 3.58941817e+0f, 4.78265762e+0f, 6.37256861e+0f, 8.49101734e+0f, 1.13137083e+1f
        };

        public static float[] DequantizerNormalizeTable { get; } =
        {
            0.0000000e+0f, 6.6666666e-1f, 4.0000000e-1f, 2.8571430e-1f, 2.2222222e-1f, 1.8181818e-1f, 1.5384616e-1f, 1.3333334e-1f,
            6.4516127e-2f, 3.1746034e-2f, 1.5748031e-2f, 7.8431377e-3f, 3.9138943e-3f, 1.9550342e-3f, 9.7703957e-4f, 4.8840052e-4f
        };

        public static float[] IntensityRatioTable { get; } =
        {
            2.00000000e+0f, 1.85714281e+0f, 1.71428573e+0f, 1.57142854e+0f, 1.42857146e+0f, 1.28571427e+0f, 1.14285719e+0f, 1.00000000e+0f,
            8.57142866e-1f, 7.14285731e-1f, 5.71428597e-1f, 4.28571433e-1f, 2.85714298e-1f, 1.42857149e-1f, 0.00000000e+0f, 0.00000000e+0f
        };

        public static float[] ScaleConversionTable { get; } =
        {
            0.00000000e+0f, 0.00000000e+0f, 1.87066309e-8f, 2.49253240e-8f, 3.32113146e-8f, 4.42518342e-8f, 5.89625841e-8f, 7.85636658e-8f,
            1.04680787e-7f, 1.39480093e-7f, 1.85847810e-7f, 2.47629657e-7f, 3.29949842e-7f, 4.39635897e-7f, 5.85785187e-7f, 7.80519201e-7f,
            1.03998923e-6f, 1.38571545e-6f, 1.84637236e-6f, 2.46016680e-6f, 3.27800626e-6f, 4.36772189e-6f, 5.81969516e-6f, 7.75435092e-6f,
            1.03321499e-5f, 1.37668931e-5f, 1.83434568e-5f, 2.44414186e-5f, 3.25665424e-5f, 4.33927198e-5f, 5.78178697e-5f, 7.70384140e-5f,
            1.02648490e-4f, 1.36772185e-4f, 1.82239717e-4f, 2.42822120e-4f, 3.23544111e-4f, 4.31100692e-4f, 5.74412581e-4f, 7.65366014e-4f,
            1.01979857e-3f, 1.35881291e-3f, 1.81052648e-3f, 2.41240440e-3f, 3.21436627e-3f, 4.28292621e-3f, 5.70671028e-3f, 7.60380644e-3f,
            1.01315593e-2f, 1.34996194e-2f, 1.79873314e-2f, 2.39669066e-2f, 3.19342874e-2f, 4.25502807e-2f, 5.66953793e-2f, 7.55427703e-2f,
            1.00655645e-1f, 1.34116858e-1f, 1.78701669e-1f, 2.38107920e-1f, 3.17262739e-1f, 4.22731191e-1f, 5.63260794e-1f, 7.50507057e-1f,

            1.00000000e+0f, 1.33243251e+0f, 1.77537644e+0f, 2.36556935e+0f, 3.15196180e+0f, 4.19977617e+0f, 5.59591866e+0f, 7.45618439e+0f,
            9.93486214e+0f, 1.32375345e+1f, 1.76381207e+1f, 2.35016060e+1f, 3.13143063e+1f, 4.17242012e+1f, 5.55946846e+1f, 7.40761642e+1f,
            9.87014923e+1f, 1.31513077e+2f, 1.75232315e+2f, 2.33485229e+2f, 3.11103333e+2f, 4.14524200e+2f, 5.52325500e+2f, 7.35936523e+2f,
            9.80585754e+2f, 1.30656433e+3f, 1.74090894e+3f, 2.31964380e+3f, 3.09076880e+3f, 4.11824072e+3f, 5.48727832e+3f, 7.31142822e+3f,
            9.74198438e+3f, 1.29805371e+4f, 1.72956914e+4f, 2.30453418e+4f, 3.07063633e+4f, 4.09141563e+4f, 5.45153555e+4f, 7.26380313e+4f,
            9.67852813e+4f, 1.28959852e+5f, 1.71830313e+5f, 2.28952297e+5f, 3.05063500e+5f, 4.06476531e+5f, 5.41602563e+5f, 7.21648875e+5f,
            9.61548438e+5f, 1.28119838e+6f, 1.70711050e+6f, 2.27460950e+6f, 3.03076375e+6f, 4.03828825e+6f, 5.38074700e+6f, 7.16948200e+6f,
            9.55285100e+6f, 1.27285300e+7f, 1.69599080e+7f, 2.25979340e+7f, 3.01102220e+7f, 4.01198400e+7f, 5.34569800e+7f, 0.00000000e+0f
        };

        public static int[] ResolutionLevels { get; } =
        {
            1, 3, 5, 7, 9, 11, 13, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095
        };

        public static byte[] ScaleToResolutionCurve { get; } =
        {
            0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D,
            0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C,
            0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
            0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
            0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08,
            0x08, 0x08, 0x08, 0x08, 0x07, 0x06, 0x06, 0x05,
            0x04, 0x04, 0x04, 0x03, 0x03, 0x03, 0x02, 0x02,
            0x02, 0x02, 0x01
        };

        public static byte[] QuantizedSpectrumMaxBits { get; } =
        {
            0, 2, 3, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12
        };

        public static byte[][] QuantizedSpectrumBits { get; } =
        {
            new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            new byte[] {1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            new byte[] {2, 2, 2, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0},
            new byte[] {2, 2, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0},
            new byte[] {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4},
            new byte[] {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4},
            new byte[] {3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
            new byte[] {3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4}
        };

        public static sbyte[][] QuantizedSpectrumValue { get; } =
        {
            new sbyte[] {+0, +0, +0, +0, +0, +0, +0, +0, +0, +0, +0, +0, +0, +0, +0, +0},
            new sbyte[] {+0, +0, +1, -1, +0, +0, +0, +0, +0, +0, +0, +0, +0, +0, +0, +0},
            new sbyte[] {+0, +0, +1, +1, -1, -1, +2, -2, +0, +0, +0, +0, +0, +0, +0, +0},
            new sbyte[] {+0, +0, +1, -1, +2, -2, +3, -3, +0, +0, +0, +0, +0, +0, +0, +0},
            new sbyte[] {+0, +0, +1, +1, -1, -1, +2, +2, -2, -2, +3, +3, -3, -3, +4, -4},
            new sbyte[] {+0, +0, +1, +1, -1, -1, +2, +2, -2, -2, +3, -3, +4, -4, +5, -5},
            new sbyte[] {+0, +0, +1, +1, -1, -1, +2, -2, +3, -3, +4, -4, +5, -5, +6, -6},
            new sbyte[] {+0, +0, +1, -1, +2, -2, +3, -3, +4, -4, +5, -5, +6, -6, +7, -7}
        };

        public static byte[][] QuantizeSpectrumBits { get; } =
        {
            new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            new byte[] {0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0},
            new byte[] {0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 3, 0, 0, 0, 0, 0},
            new byte[] {0, 0, 0, 0, 0, 3, 3, 3, 2, 3, 3, 3, 0, 0, 0, 0},
            new byte[] {0, 0, 0, 0, 4, 3, 3, 3, 3, 3, 3, 3, 4, 0, 0, 0},
            new byte[] {0, 0, 0, 4, 4, 4, 3, 3, 3, 3, 3, 4, 4, 4, 0, 0},
            new byte[] {0, 0, 4, 4, 4, 4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 0},
            new byte[] {0, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4}
        };

        public static byte[][] QuantizeSpectrumValue { get; } =
        {
            new byte[] {00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00},
            new byte[] {00, 00, 00, 00, 00, 00, 00, 03, 00, 02, 00, 00, 00, 00, 00, 00},
            new byte[] {00, 00, 00, 00, 00, 00, 07, 02, 00, 01, 06, 00, 00, 00, 00, 00},
            new byte[] {00, 00, 00, 00, 00, 07, 05, 03, 00, 02, 04, 06, 00, 00, 00, 00},
            new byte[] {00, 00, 00, 00, 15, 06, 04, 02, 00, 01, 03, 05, 14, 00, 00, 00},
            new byte[] {00, 00, 00, 15, 13, 11, 04, 02, 00, 01, 03, 10, 12, 14, 00, 00},
            new byte[] {00, 00, 15, 13, 11, 09, 07, 02, 00, 01, 06, 08, 10, 12, 14, 00},
            new byte[] {00, 15, 13, 11, 09, 07, 05, 03, 00, 02, 04, 06, 08, 10, 12, 14}
        };

        public static byte[] AthCurve { get; } =
        {
            0x78, 0x5F, 0x56, 0x51, 0x4E, 0x4C, 0x4B, 0x49, 0x48, 0x48, 0x47, 0x46, 0x46, 0x45, 0x45, 0x45,
            0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
            0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D,
            0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B,
            0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B,
            0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C,
            0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
            0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43,
            0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x44,
            0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45,
            0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46,
            0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48,
            0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A,
            0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
            0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F,
            0x4F, 0x4F, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52,
            0x52, 0x52, 0x53, 0x53, 0x53, 0x53, 0x54, 0x54, 0x54, 0x54, 0x54, 0x55, 0x55, 0x55, 0x55, 0x56,
            0x56, 0x56, 0x56, 0x57, 0x57, 0x57, 0x57, 0x57, 0x58, 0x58, 0x58, 0x59, 0x59, 0x59, 0x59, 0x5A,
            0x5A, 0x5A, 0x5A, 0x5B, 0x5B, 0x5B, 0x5B, 0x5C, 0x5C, 0x5C, 0x5D, 0x5D, 0x5D, 0x5D, 0x5E, 0x5E,
            0x5E, 0x5F, 0x5F, 0x5F, 0x60, 0x60, 0x60, 0x61, 0x61, 0x61, 0x61, 0x62, 0x62, 0x62, 0x63, 0x63,
            0x63, 0x64, 0x64, 0x64, 0x65, 0x65, 0x66, 0x66, 0x66, 0x67, 0x67, 0x67, 0x68, 0x68, 0x68, 0x69,
            0x69, 0x6A, 0x6A, 0x6A, 0x6B, 0x6B, 0x6B, 0x6C, 0x6C, 0x6D, 0x6D, 0x6D, 0x6E, 0x6E, 0x6F, 0x6F,
            0x70, 0x70, 0x70, 0x71, 0x71, 0x72, 0x72, 0x73, 0x73, 0x73, 0x74, 0x74, 0x75, 0x75, 0x76, 0x76,
            0x77, 0x77, 0x78, 0x78, 0x78, 0x79, 0x79, 0x7A, 0x7A, 0x7B, 0x7B, 0x7C, 0x7C, 0x7D, 0x7D, 0x7E,
            0x7E, 0x7F, 0x7F, 0x80, 0x80, 0x81, 0x81, 0x82, 0x83, 0x83, 0x84, 0x84, 0x85, 0x85, 0x86, 0x86,
            0x87, 0x88, 0x88, 0x89, 0x89, 0x8A, 0x8A, 0x8B, 0x8C, 0x8C, 0x8D, 0x8D, 0x8E, 0x8F, 0x8F, 0x90,
            0x90, 0x91, 0x92, 0x92, 0x93, 0x94, 0x94, 0x95, 0x95, 0x96, 0x97, 0x97, 0x98, 0x99, 0x99, 0x9A,
            0x9B, 0x9B, 0x9C, 0x9D, 0x9D, 0x9E, 0x9F, 0xA0, 0xA0, 0xA1, 0xA2, 0xA2, 0xA3, 0xA4, 0xA5, 0xA5,
            0xA6, 0xA7, 0xA7, 0xA8, 0xA9, 0xAA, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAE, 0xAF, 0xB0, 0xB1, 0xB1,
            0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
            0xC0, 0xC1, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD,
            0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD,
            0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xED, 0xEE,
            0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD
        };

        public static double[] MdctWindow { get; } =
        {
            6.90533780e-4f, 1.97623484e-3f, 3.67386453e-3f, 5.72424009e-3f, 8.09670333e-3f, 1.07731819e-2f, 1.37425177e-2f, 1.69978570e-2f,
            2.05352642e-2f, 2.43529025e-2f, 2.84505188e-2f, 3.28290947e-2f, 3.74906212e-2f, 4.24378961e-2f, 4.76744287e-2f, 5.32043017e-2f,
            5.90321124e-2f, 6.51628822e-2f, 7.16020092e-2f, 7.83552229e-2f, 8.54284912e-2f, 9.28280205e-2f, 1.00560151e-1f, 1.08631350e-1f,
            1.17048122e-1f, 1.25816986e-1f, 1.34944350e-1f, 1.44436508e-1f, 1.54299513e-1f, 1.64539129e-1f, 1.75160721e-1f, 1.86169162e-1f,
            1.97568730e-1f, 2.09362969e-1f, 2.21554622e-1f, 2.34145418e-1f, 2.47135997e-1f, 2.60525763e-1f, 2.74312705e-1f, 2.88493186e-1f,
            3.03061932e-1f, 3.18011731e-1f, 3.33333343e-1f, 3.49015296e-1f, 3.65043819e-1f, 3.81402701e-1f, 3.98073107e-1f, 4.15033519e-1f,
            4.32259798e-1f, 4.49725032e-1f, 4.67399567e-1f, 4.85251158e-1f, 5.03244936e-1f, 5.21343827e-1f, 5.39508522e-1f, 5.57697773e-1f,
            5.75868905e-1f, 5.93978047e-1f, 6.11980557e-1f, 6.29831433e-1f, 6.47486031e-1f, 6.64900243e-1f, 6.82031155e-1f, 6.98837578e-1f,
            7.15280414e-1f, 7.31323123e-1f, 7.46932149e-1f, 7.62077332e-1f, 7.76731849e-1f, 7.90872812e-1f, 8.04481268e-1f, 8.17542017e-1f,
            8.30044091e-1f, 8.41980159e-1f, 8.53346705e-1f, 8.64143789e-1f, 8.74374807e-1f, 8.84046197e-1f, 8.93167078e-1f, 9.01749134e-1f,
            9.09806132e-1f, 9.17353690e-1f, 9.24408972e-1f, 9.30990338e-1f, 9.37117040e-1f, 9.42809045e-1f, 9.48086798e-1f, 9.52970862e-1f,
            9.57481921e-1f, 9.61640537e-1f, 9.65466917e-1f, 9.68980789e-1f, 9.72201586e-1f, 9.75147963e-1f, 9.77837980e-1f, 9.80289042e-1f,
            9.82517719e-1f, 9.84539866e-1f, 9.86370564e-1f, 9.88024116e-1f, 9.89514053e-1f, 9.90853190e-1f, 9.92053449e-1f, 9.93126273e-1f,
            9.94082093e-1f, 9.94930983e-1f, 9.95682180e-1f, 9.96344328e-1f, 9.96925533e-1f, 9.97433305e-1f, 9.97874618e-1f, 9.98256087e-1f,
            9.98583674e-1f, 9.98862922e-1f, 9.99099135e-1f, 9.99296963e-1f, 9.99460995e-1f, 9.99595225e-1f, 9.99703407e-1f, 9.99789119e-1f,
            9.99855518e-1f, 9.99905586e-1f, 9.99941945e-1f, 9.99967217e-1f, 9.99983609e-1f, 9.99993265e-1f, 9.99998033e-1f, 9.99999762e-1f
        };
    }
}
