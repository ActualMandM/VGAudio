using VGAudio.Formats.GcAdpcm;
using Xunit;

namespace VGAudio.Tests.Formats.GcAdpcm
{
    public class GcAdpcmLoopContextTests
    {
        [Theory]
        [InlineData(10, 20, 30, 40, false)]
        [InlineData(25, 26, 27, 28, true)]
        public void AssigningLoopContext(short predScale, short hist1, short hist2, int loopStart, bool isSelfCalculated)
        {
            var context = new GcAdpcmLoopContext(predScale, hist1, hist2, loopStart, isSelfCalculated);
            var expected = new object[] { predScale, hist1, hist2, loopStart, isSelfCalculated };
            var actual = new object[] { context.PredScale, context.Hist1, context.Hist2, context.LoopStart, context.IsSelfCalculated };
            Assert.Equal(expected, actual);
        }

        [Theory]
        [InlineData(0, 0x4A)]
        [InlineData(13, 0x4A)]
        [InlineData(14, 0x59)]
        [InlineData(71, 0x43)]
        [InlineData(139, 0x35)]
        public void CreatingLoopContextPredScale(int loopStart, short expected)
        {
            var context = new GcAdpcmLoopContext(Adpcm, Pcm, loopStart);
            Assert.Equal(expected, context.PredScale);
        }

        [Theory]
        [InlineData(0, 0, 0)]
        [InlineData(1, 0x2E87, 0)]
        [InlineData(14, 0x7E9C, 0x60F4)]
        [InlineData(71, 0x0F57, 0x00C4)]
        [InlineData(139, 0x1C04, 0x7AC3)]
        public void CreatingLoopContextHistory(int loopStart, short expected1, short expected2)
        {
            var context = new GcAdpcmLoopContext(Adpcm, Pcm, loopStart);
            short[] expected = new[] { expected1, expected2 };
            short[] actual = new[] { context.Hist1, context.Hist2 };
            Assert.Equal(expected, actual);
        }

        [Theory]
        [InlineData(0)]
        [InlineData(139)]
        public void CreatingLoopContextLoopStartSet(int loopStart)
        {
            var context = new GcAdpcmLoopContext(Adpcm, Pcm, loopStart);
            Assert.Equal(loopStart, context.LoopStart);
        }

        [Theory]
        [InlineData(0)]
        [InlineData(139)]
        public void CreatingLoopContextSelfCalculatedIsTrue(int loopStart)
        {
            var context = new GcAdpcmLoopContext(Adpcm, Pcm, loopStart);
            Assert.True(context.IsSelfCalculated);
        }

        private byte[] Adpcm { get; } =
        {
            0x4A, 0x15, 0x9F, 0x66, 0xF0, 0xD1, 0x21, 0x93,
            0x59, 0x22, 0xF3, 0xD3, 0xB8, 0x8E, 0xDD, 0xE6,
            0x15, 0x15, 0x2B, 0xA9, 0xD5, 0x77, 0x43, 0xE3,
            0x20, 0x5A, 0xE5, 0x57, 0xE8, 0x3B, 0x22, 0x08,
            0x16, 0x4D, 0x3A, 0x95, 0xF3, 0x03, 0xAE, 0xFD,
            0x43, 0xDF, 0xB0, 0x88, 0x3F, 0x72, 0x1A, 0xD8,
            0x05, 0xE1, 0x3A, 0x9B, 0xBC, 0x65, 0xDF, 0x06,
            0x04, 0x7C, 0x64, 0x4D, 0x97, 0x5A, 0x98, 0x0E,
            0x59, 0x3A, 0xE0, 0xB1, 0xE3, 0x48, 0xB3, 0x93,
            0x35, 0x3E, 0xA7, 0x1A, 0x20, 0x55, 0x97, 0x79
        };

        private short[] Pcm { get; } =
        {
            0x2E87, 0x2D00, 0x5DF5, 0x0FB0, 0x461B, 0x5845, 0x214A, 0x15D6, 0x723D, 0x24A6, 0x0BDF, 0x7FB7, 0x60F4, 0x7E9C,
            0x31B0, 0x4AB1, 0x6E7F, 0x44F7, 0x6E47, 0x67DA, 0x50D1, 0x3C71, 0x39BA, 0x319D, 0x0F5F, 0x74F0, 0x1ACC, 0x0B88,
            0x323E, 0x3651, 0x508F, 0x2E42, 0x7680, 0x1598, 0x2D60, 0x6702, 0x4358, 0x61E5, 0x0CEF, 0x50E4, 0x1AE9, 0x3D13,
            0x2443, 0x3FDE, 0x0E73, 0x74C2, 0x49ED, 0x4802, 0x0CE2, 0x7804, 0x4B16, 0x490A, 0x4AE2, 0x2039, 0x7BB4, 0x1866,
            0x1A7C, 0x5F7E, 0x4E0F, 0x5535, 0x23E1, 0x7162, 0x4F2F, 0x1D34, 0x3EB3, 0x1758, 0x4408, 0x654E, 0x2CF4, 0x00C4,
            0x0F57, 0x2A24, 0x4082, 0x7343, 0x1E9B, 0x35AE, 0x0D05, 0x656F, 0x2056, 0x3D37, 0x62B9, 0x2372, 0x2DE8, 0x7675,
            0x16CB, 0x3875, 0x7439, 0x0FC8, 0x2E93, 0x0943, 0x53B3, 0x0448, 0x2B16, 0x0C9B, 0x2B98, 0x12DD, 0x7899, 0x3CB6,
            0x6E7F, 0x5A11, 0x4FBA, 0x5D43, 0x6E86, 0x49FC, 0x5DF6, 0x231A, 0x78B0, 0x32BA, 0x1243, 0x1760, 0x6094, 0x5F4B,
            0x7B9D, 0x65AC, 0x5129, 0x0402, 0x7408, 0x66A2, 0x470B, 0x5FC5, 0x1367, 0x1A88, 0x0FDA, 0x2A8F, 0x2B3C, 0x79D5,
            0x21D7, 0x15A0, 0x5ABD, 0x1F56, 0x73F2, 0x2AED, 0x05F4, 0x1679, 0x2522, 0x0A29, 0x5537, 0x7AC3, 0x1C04, 0x3CD3
        };
    }
}
